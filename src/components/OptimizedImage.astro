---
interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  quality?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  sizes?: string;
}

const {
  src,
  alt,
  width = 800,
  height = 600,
  quality = 80,
  class: className = '',
  loading = 'lazy',
  sizes = '(min-width: 1024px) 800px, (min-width: 768px) 600px, 100vw'
} = Astro.props;

// Funzione per ottenere le versioni ottimizzate automaticamente generate
const getOptimizedVersions = (originalSrc: string) => {
  if (!originalSrc || !originalSrc.startsWith('/uploads/')) {
    return { webp: null, avif: null, original: originalSrc };
  }

  // Normalizzazione universale del nome file per caratteri indesiderati
  let correctedSrc = originalSrc;
  
  // Normalizza il nome del file (non il percorso della cartella)
  const pathParts = correctedSrc.split('/');
  const filename = pathParts[pathParts.length - 1];
  
  // Normalizza solo il nome del file, mantenendo l'estensione
  const extensionMatch = filename.match(/\.[^.]*$/);
  const extension = extensionMatch ? extensionMatch[0] : '';
  const nameWithoutExt = filename.replace(/\.[^.]*$/, '');
  
  // Normalizza: rimuovi caratteri speciali, sostituisci spazi e caratteri problematici
  const normalizedName = nameWithoutExt
    .replace(/[^\w\-\.]/g, '-')  // Sostituisce caratteri non alfanumerici con -
    .replace(/[-]+/g, '-')       // Rimuove - multipli consecutivi
    .replace(/^-+|-+$/g, '');    // Rimuove - all'inizio e alla fine
  
  // Ricostruisci il percorso con il nome normalizzato
  if (normalizedName !== nameWithoutExt) {
    pathParts[pathParts.length - 1] = normalizedName + extension;
    correctedSrc = pathParts.join('/');
  }

  // Estrai path e nome file
  const pathParts = correctedSrc.split('/');
  const filename = pathParts[pathParts.length - 1];
  const directory = pathParts.slice(0, -1).join('/');
  
  // Rimuovi estensione e genera nomi ottimizzati
  const nameWithoutExt = filename.replace(/\.[^/.]+$/, '');
  
  const webpSrc = `${directory}/optimized/${nameWithoutExt}.webp`;
  const avifSrc = `${directory}/optimized/${nameWithoutExt}.avif`;
  
  return {
    webp: webpSrc,
    avif: avifSrc,
    original: correctedSrc
  };
};

const { webp, avif, original } = getOptimizedVersions(src);

// In development, mostra info di debug
if (import.meta.env.DEV) {
  console.log('üñºÔ∏è AutoOptimizedImage:', { 
    original: src, 
    normalized: original,
    webp, 
    avif,
    hasOptimized: !!(webp && avif),
    fileNormalized: original !== src ? `${src} ‚Üí ${original}` : 'no normalization needed'
  });
}
---

<picture class={className}>
  {/* AVIF - formato pi√π efficiente (se disponibile) */}
  {avif && (
    <source 
      srcset={avif} 
      type="image/avif"
      sizes={sizes}
    />
  )}
  
  {/* WebP - ottimo supporto browser (se disponibile) */}
  {webp && (
    <source 
      srcset={webp} 
      type="image/webp"
      sizes={sizes}
    />
  )}
  
  {/* Fallback JPEG/PNG originale */}
  <img 
    src={original} 
    alt={alt} 
    width={width} 
    height={height} 
    loading={loading}
    class="auto-optimized-image"
  />
</picture>

<style>
  picture { 
    display: block; 
    width: 100%; 
    height: 100%; 
  }
  
  .auto-optimized-image { 
    width: 100%; 
    height: 100%; 
    object-fit: cover; 
  }
</style>
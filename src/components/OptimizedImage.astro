---
interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  quality?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  sizes?: string;
}

const {
  src,
  alt,
  width = 800,
  height = 600,
  quality = 80,
  class: className = '',
  loading = 'lazy',
  sizes = '(min-width: 1024px) 800px, (min-width: 768px) 600px, 100vw'
} = Astro.props;

import fs from 'fs';
import path from 'path';

// Funzione per ottenere le versioni ottimizzate con validazione esistenza file
const getOptimizedVersions = (originalSrc: string) => {
  if (!originalSrc || !originalSrc.startsWith('/uploads/')) {
    return { webp: null, avif: null, original: originalSrc };
  }

  // Normalizzazione universale del nome file per caratteri indesiderati
  let correctedSrc = originalSrc;
  
  // Normalizza il nome del file (non il percorso della cartella)
  const pathParts = correctedSrc.split('/');
  const filename = pathParts[pathParts.length - 1];
  
  // Normalizza solo il nome del file, mantenendo l'estensione
  const extensionMatch = filename.match(/\.[^.]*$/);
  const extension = extensionMatch ? extensionMatch[0] : '';
  const nameWithoutExt = filename.replace(/\.[^.]*$/, '');
  
  // Normalizza: rimuovi caratteri speciali, sostituisci spazi e caratteri problematici
  const normalizedName = nameWithoutExt
    .replace(/[^\w\-\.]/g, '-')  // Sostituisce caratteri non alfanumerici con -
    .replace(/[-]+/g, '-')       // Rimuove - multipli consecutivi
    .replace(/^-+|-+$/g, '');    // Rimuove - all'inizio e alla fine
  
  // Ricostruisci il percorso con il nome normalizzato
  if (normalizedName !== nameWithoutExt) {
    pathParts[pathParts.length - 1] = normalizedName + extension;
    correctedSrc = pathParts.join('/');
  }

  // Estrai path e directory dal percorso corretto
  const directory = pathParts.slice(0, -1).join('/');
  const finalFilename = pathParts[pathParts.length - 1];
  const finalNameWithoutExt = finalFilename.replace(/\.[^/.]+$/, '');
  
  const webpSrc = `${directory}/optimized/${finalNameWithoutExt}.webp`;
  const avifSrc = `${directory}/optimized/${finalNameWithoutExt}.avif`;
  
  // VALIDAZIONE ESISTENZA FILE: Controlla se i file esistono fisicamente
  let validWebp: string | null = null;
  let validAvif: string | null = null;
  
  try {
    const publicDir = path.join(process.cwd(), 'public');
    
    // Controlla WebP
    const webpPath = path.join(publicDir, webpSrc);
    try {
      const webpStats = fs.statSync(webpPath);
      if (webpStats.size >= 100) { // File valido (almeno 100 bytes)
        validWebp = webpSrc;
      } else {
        console.log(`‚ö†Ô∏è WebP file too small (${webpStats.size}B), skipping:`, webpSrc);
      }
    } catch {
      // File non esiste
      if (import.meta.env.DEV) {
        console.log(`‚ÑπÔ∏è WebP not found:`, webpSrc);
      }
    }
    
    // Controlla AVIF
    const avifPath = path.join(publicDir, avifSrc);
    try {
      const avifStats = fs.statSync(avifPath);
      if (avifStats.size >= 100) { // File valido (almeno 100 bytes)
        validAvif = avifSrc;
      } else {
        console.log(`‚ö†Ô∏è AVIF file too small (${avifStats.size}B), skipping:`, avifSrc);
      }
    } catch {
      // File non esiste
      if (import.meta.env.DEV) {
        console.log(`‚ÑπÔ∏è AVIF not found:`, avifSrc);
      }
    }
    
  } catch (error) {
    // In caso di errore, non usare versioni ottimizzate
    console.log('‚ö†Ô∏è Validation error, using original only:', error.message);
  }
  
  return {
    webp: validWebp,
    avif: validAvif,
    original: correctedSrc
  };
};

const { webp, avif, original } = getOptimizedVersions(src);

// In development, mostra info di debug
if (import.meta.env.DEV) {
  console.log('üñºÔ∏è ValidatedOptimizedImage:', { 
    original: src, 
    normalized: original,
    webp: webp ? '‚úÖ valid' : '‚ùå skipped',
    avif: avif ? '‚úÖ valid' : '‚ùå skipped',
    fileNormalized: original !== src ? `${src} ‚Üí ${original}` : 'no normalization needed'
  });
}
---

<picture class={className}>
  {/* AVIF - formato pi√π efficiente (se disponibile) */}
  {avif && (
    <source 
      srcset={avif} 
      type="image/avif"
      sizes={sizes}
    />
  )}
  
  {/* WebP - ottimo supporto browser (se disponibile) */}
  {webp && (
    <source 
      srcset={webp} 
      type="image/webp"
      sizes={sizes}
    />
  )}
  
  {/* Fallback JPEG/PNG originale */}
  <img 
    src={original} 
    alt={alt} 
    width={width} 
    height={height} 
    loading={loading}
    class="auto-optimized-image"
    onError="handleImageError(this)"
  />
</picture>

<script>
  // Sistema di fallback intelligente per immagini con errori
  function handleImageError(img) {
    const picture = img.parentElement;
    const sources = picture.querySelectorAll('source');
    
    // Se l'immagine principale ha errore, rimuovi tutte le sources ottimizzate
    // Il browser user√† automaticamente solo l'src dell'img (originale)
    if (img.src === img.getAttribute('src')) {
      console.log('üîÑ Image fallback activated for:', img.src);
      sources.forEach(source => source.remove());
      
      // Aggiungi classe per debug/styling
      img.classList.add('fallback-active');
    }
  }
  
  // Sistema avanzato: Intercetta errori di rete (status 206, 404, etc.)
  document.addEventListener('DOMContentLoaded', function() {
    const images = document.querySelectorAll('.auto-optimized-image');
    
    images.forEach(img => {
      // Controlla se l'immagine si carica correttamente
      img.addEventListener('error', function() {
        console.log('‚ùå Image load error detected:', this.src);
        handleImageError(this);
      });
      
      // Controlla anche errori di rete (fetch per validare)
      if (img.complete && img.naturalHeight === 0) {
        console.log('‚ö†Ô∏è Image appears broken on load:', img.src);
        handleImageError(img);
      }
    });
  });
  
  // Sistema per rilevare status 206 e altri errori HTTP + file vuoti
  async function validateImageSources() {
    const pictures = document.querySelectorAll('picture');
    
    for (const picture of pictures) {
      const sources = picture.querySelectorAll('source');
      const img = picture.querySelector('img');
      
      for (const source of sources) {
        const srcset = source.getAttribute('srcset');
        if (srcset) {
          try {
            const response = await fetch(srcset, { method: 'HEAD' });
            
            if (response.status === 200) {
              // Controlla anche file vuoti o corrotti con status 200
              const contentLength = response.headers.get('content-length');
              const contentType = response.headers.get('content-type');
              
              if (contentLength && parseInt(contentLength) < 100) {
                console.log(`üö´ Removing empty file (${contentLength} bytes):`, srcset);
                source.remove();
                img.setAttribute('data-fallback-reason', `Empty File (${contentLength}B)`);
              } else if (contentType && !contentType.startsWith('image/')) {
                console.log(`üö´ Removing invalid content-type (${contentType}):`, srcset);
                source.remove();
                img.setAttribute('data-fallback-reason', `Invalid Type (${contentType})`);
              }
            } else {
              // Status non √® 200, rimuovi questa source
              console.log(`üö´ Removing source with status ${response.status}:`, srcset);
              source.remove();
              img.setAttribute('data-fallback-reason', `HTTP ${response.status}`);
            }
          } catch (error) {
            console.log('üö´ Removing source due to network error:', srcset);
            source.remove();
            img.setAttribute('data-fallback-reason', 'Network Error');
          }
        }
      }
    }
  }
  
  // Esegui validazione dopo il caricamento del DOM
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', validateImageSources);
  } else {
    validateImageSources();
  }
</script>

<style>
  picture { 
    display: block; 
    width: 100%; 
    height: 100%; 
  }
  
  .auto-optimized-image { 
    width: 100%; 
    height: 100%; 
    object-fit: cover; 
  }
  
  /* Stile per immagini in fallback */
  .auto-optimized-image.fallback-active {
    /* Opzionale: bordo sottile per debug in sviluppo */
    /* border: 1px solid rgba(255, 193, 7, 0.3); */
  }
  
  /* Debug info in development */
  .auto-optimized-image[data-fallback-reason]::after {
    content: "Fallback: " attr(data-fallback-reason);
    position: absolute;
    bottom: 4px;
    left: 4px;
    background: rgba(255, 193, 7, 0.8);
    color: black;
    font-size: 10px;
    padding: 2px 4px;
    border-radius: 2px;
    font-family: monospace;
    display: none; /* Mostra solo in dev se necessario */
  }
  
  /* Mostra debug info solo in development */
  @media (max-width: 0px) { /* Nascosto di default, attiva via JS se necessario */
    .auto-optimized-image[data-fallback-reason]::after {
      display: block;
    }
  }
</style>
---
interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  quality?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  sizes?: string;
  responsive?: boolean;
}

const {
  src,
  alt,
  width = 800,
  height = 600,
  quality = 80,
  class: className = '',
  loading = 'lazy',
  sizes = '(min-width: 1024px) 800px, (min-width: 768px) 600px, 100vw',
  responsive = true
} = Astro.props;

// Sistema on-the-fly con images.weserv.nl
const isDev = import.meta.env.DEV;
// Forza l'uso di kelua.netlify.app per le immagini (dove sono effettivamente deployate)
const baseUrl = isDev ? 'http://localhost:4322' : 'https://kelua.netlify.app';
const imageUrl = src.startsWith('/') ? `${baseUrl}${src}` : src;

const getOptimizedUrl = (format: string, w?: number, q?: number) => {
  // TEMPORANEO: Usa sempre l'immagine originale fino a risolvere problemi weserv.nl
  // In development, usa direttamente l'immagine originale
  if (isDev && src.startsWith('/')) {
    return src; // Usa l'immagine locale direttamente
  }
  
  // In production, usa l'immagine originale (temporaneo)
  // Fix per inconsistenza nomi file: prova prima con underscore ‚Üí trattino
  let finalImageUrl = imageUrl;
  if (finalImageUrl.includes('IMG_')) {
    finalImageUrl = finalImageUrl.replace(/IMG_(\d+)/g, 'IMG-$1');
  }
  
  // TEMPORANEO: Restituisci sempre l'immagine originale (no ottimizzazione)
  return finalImageUrl;
  
  /* TODO: Riabilitare quando risolviamo weserv.nl
  const params = new URLSearchParams();
  params.set('url', finalImageUrl);
  params.set('output', format);
  if (w) params.set('w', w.toString());
  if (q) params.set('q', q.toString());
  params.set('fit', 'cover');  
  return `https://images.weserv.nl/?${params.toString()}`;
  */
};

// Genera le varianti ottimizzate
const webpSrc = getOptimizedUrl('webp', width, quality);
const avifSrc = getOptimizedUrl('avif', width, quality);

// Genera varianti responsive se richieste
const responsiveWebpSrcSet = responsive ? [
  `${getOptimizedUrl('webp', Math.round(width * 0.5), quality)} ${Math.round(width * 0.5)}w`,
  `${getOptimizedUrl('webp', width, quality)} ${width}w`,
  `${getOptimizedUrl('webp', Math.round(width * 1.5), quality)} ${Math.round(width * 1.5)}w`
].join(', ') : undefined;

const responsiveAvifSrcSet = responsive ? [
  `${getOptimizedUrl('avif', Math.round(width * 0.5), quality)} ${Math.round(width * 0.5)}w`,
  `${getOptimizedUrl('avif', width, quality)} ${width}w`,
  `${getOptimizedUrl('avif', Math.round(width * 1.5), quality)} ${Math.round(width * 1.5)}w`
].join(', ') : undefined;

// Immagine di fallback
const fallbackSrc = isDev && src.startsWith('/') ? src : webpSrc;

if (isDev) {
  console.log('üñºÔ∏è OptimizedImage:', { 
    original: src, 
    isDev,
    imageUrl,
    webp: webpSrc, 
    avif: avifSrc,
    fallback: fallbackSrc,
    isLocalPath: src.startsWith('/')
  });
}
---

<picture class={className}>
  {responsive ? (
    <>
      <source srcset={responsiveAvifSrcSet} sizes={sizes} type="image/avif" />
      <source srcset={responsiveWebpSrcSet} sizes={sizes} type="image/webp" />
    </>
  ) : (
    <>
      <source srcset={avifSrc} type="image/avif" />
      <source srcset={webpSrc} type="image/webp" />
    </>
  )}
  <img 
    src={fallbackSrc} 
    alt={alt} 
    width={width} 
    height={height} 
    loading={loading}
    class="optimized-image"
  />
</picture>

<style>
  picture { 
    display: block; 
    width: 100%; 
    height: 100%; 
  }
  
  .optimized-image { 
    width: 100%; 
    height: 100%; 
    object-fit: cover; 
  }
</style>